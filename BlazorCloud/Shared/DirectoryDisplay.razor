@using BlazorCloudCore.Models
@using BlazorCloudCore.Logic.Services
@using System.IO

@inject FileAndDirectoryService _fileAndDirectoryService
@inject UserSessionService _userSessionService

<MudPaper Width="300px">
    <MudTreeView T="string" Hover="true">
        @foreach (var directory in DirectoryList)
        {
            @if (directory.ShowSubdirectories)
            {
                <MudTreeViewItem Value="@(directory.DirectoryName)" @onclick="()=>ToggleSubdirectoriesComponent(directory)" @bind-Expanded="directory.ShowSubdirectories">
                    <SubdirectoryDisplay></SubdirectoryDisplay>
                </MudTreeViewItem>
            }
            else
            {
                <MudTreeViewItem Value="@(directory.DirectoryName)" @onclick="()=>ToggleSubdirectoriesComponent(directory)" />
            }
        }
    </MudTreeView>
</MudPaper>


@code {
    [Parameter] public DirectoryBase BaseDirectory { get; set; }

    [Parameter] public string FullBaseDirectoryPath { get; set; }

    [Parameter] public List<DirectoryBase> DirectoryList { get; set; }

    public bool ShowSubdirectories { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> Click { get; set; }

    void OnClick(MouseEventArgs args)
    {
        Click.InvokeAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        DirectoryList = new List<DirectoryBase>();
        DirectoryList = await _fileAndDirectoryService.GetListOfDirectoriesFromPathAsync(BlazorCloud.Data.PathManager.Instance.GetFullFilePath());
    }
    /// <summary>
    /// Toggles the display of subdirectories
    /// </summary>
    public void ToggleSubdirectoriesComponent(DirectoryBase directory)
    {
        //Trigger PathChanged Event
        _userSessionService.currentEventArgs.DirectoryPath = Path.Combine(directory.DirectoryPath, directory.DirectoryName);
        _userSessionService.Invoke();
        if (directory.ShowSubdirectories)
        {
            directory.ShowSubdirectories = false;
        }
        else
        {
            directory.ShowSubdirectories = true;
        }
    }
}
